#+title: 11/27/18 Design Presentation
#+author: Samuel Breese and Jordan Alligood
#+options: date:nil timestamp:nil toc:nil num:nil
#+reveal_root: https://cdn.jsdelivr.net/reveal.js/3.0.0/

* Introduction
- Implementation in Haskell
- Using advanced type-level features to abstract over ciphers and hashes
* Why Haskell?
- Safety guarantees
  - Avoid buffer overflow
- Parallelism is a compiler option
- Good libraries, big integers in standard library
- Abstraction
* Status of implementation
- RSA and SHA-1 implemented fully
- DH key exchange
- SDES ported to common interface for brute-force attack
- Currently debugging SHA-256 implementation
* Future implementation plans
- ElGamal and ECC (fun, fairly easy)
- A good block cipher (harder)
  - Probably Triple-DES :(
- Some PRNGs/stream ciphers
  - Using ~/dev/random~ for RSA prime generation, Miller-Rabin, etc.
  - Probably ChaCha20?
- Deriving instances of cipher interface automatically for PRNGs
- Generic HMAC on our hash interface
* Eventual result
- Hopefully a client compatible with TLS 1.2
- Overlap:
  - RSA or DH for key exchange
  - 3DES or ChaCha20 for cipher
  - SHA-1 or SHA-256 HMAC for data integrity
- Architecture is general enough to support whatever we want, so just having fun at this point.
- Unsure of how much is expected for the assignment
* Security considerations
- Unlikely that we'll implement algorithms for "modern" TLS by the deadline
- Trying to avoid things that are /really/ easily broken
* Brute-force attack for any implemented cipher
- Given a cipher instance and a plaintext-ciphertext pair, finds the key
- (Eventually)
- Probably for hashes too, if we need it
* Examples
- Using an interesting technique to abstract over input/output types of ciphers/hashes.
- Effectively, emulating dependent records with typeclasses and type families.
- Advantage over just using a typeclasse: allows us to explicitly pass around and store typeclass instances.
** Hashes
#+begin_src haskell
data Implementation (a :: Type) (p :: Type) (h :: Type) = Implementation
  { hash :: p -> h
  , parsePlaintext :: ByteString -> p
  , renderHashtext :: h -> ByteString
  }

class Hash (a :: Type) where
  type family Plaintext a :: Type
  type family Hashtext a :: Type
  name :: Text
  impl :: Implementation a (Plaintext a) (Hashtext a)

type Impl a = Implementation a (Plaintext a) (Hashtext a)
#+end_src
** Lookup tables
- Represented as heterogeneous association lists
#+begin_src haskell
data Lookup (k :: Type) :: Type where
  None :: forall (k :: Type). Eq k => Lookup k
  Some :: forall (k :: Type) (a :: Type).
    (Hash a, Eq k) => k -> Impl a -> Lookup k -> Lookup k
#+end_src
** Similar construction for ciphers
- More elaborate, more types involved
  - plaintext, ciphertext, encryption key, decryption key
- Symmetric and public-key ciphers have an identical interface
#+begin_src haskell
instance Cipher RSA where
  type EncryptionKey RSA = (Integer, Integer) -- (e, N)
  type DecryptionKey RSA = (Integer, Integer, Integer) -- (d, p, q)
  type Plaintext RSA = Integer
  type Ciphertext RSA = Integer
  name = "RSA"
  impl = Implementation {...}

instance Cipher SDES where
  type EncryptionKey SDES = Bits Ten
  type DecryptionKey SDES = Bits Ten
  type Plaintext SDES = [Bits Eight]
  type Ciphertext SDES = [Bits Eight]
  name = "SDES"
  impl = Implementation {...}
#+end_src
* Questions?
