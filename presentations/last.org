#+title: Group 10 Post-Mortem
#+author: Samuel Breese and Jordan Alligood
#+options: date:nil timestamp:nil toc:nil num:nil
#+reveal_root: https://cdn.jsdelivr.net/reveal.js/3.0.0/
#+reveal_theme: black

* Thoughts on our implementation
* The Good
** Lots of algorithms
- SHA-1, SHA256, HMAC
- RSA, elliptic-curve cryptography on Curve25519, ephemeral elliptic-curve Diffie-Hellman.
- ChaCha20 and Poly1305 AEAD
** They work
(at least for the test vectors in the RFCs)
** They work together
- We built a simple "echo" server that establishes a secure channel and reverses messages
** Avoided using any weak cryptosystems
- Didn't use SDES at all
- RSA (not semantically secure) and SHA-1 avoided
- Prefers SHA256-HMAC for MAC, ECDHE for key exchange, and ChaCha20-Poly1305 for encryption and verification
* The Bad
** Protocol is messy
- Did practically all of the networking/protocol stuff on Sunday night
- Initially aiming for TLS compatibility
- Ran out of time, so settled for something that looks like TLS without some stuff that would be irritating to implement
- Could probably make it work with TLS given another week of effort
** Tenuous usability
- Practically untested
- It compiles, so no problem, right?
* The Ugly
** Codebase isn't what it could be
- We made a lot of sacrifices in the final hours
- Produced dead code during design that ended up being cut
** We didn't sleep for three days
* Summary
- There are things we could have improved, given more time =:(=
- Group 13 broke our system =:|=
- But it was fun =:)=
* Analysis of Group 11's implementation
* Starting off
- Some difficulty getting the project running.
- The project didn't have a =requirements.txt= or otherwise specify Numpy version, and there were some missing functions (tested using Numpy 1.14.5)
** It worked out
- Fortunately, with a few small changes to the code we were able to get everything running
* Choice of cryptosystems
** Hashing and message authentication
- SHA-1 is broken in practice (https://shattered.io)
- Uses HMAC for message authentication, which prevents length extension attacks on SHA-1
** Key exchange 
- Supports RSA and Blum-Goldwasser
- Partial implementation of ECC, we weren't able to get this working
** Secure channel
- Uses SDES =:(=
- Looks like some work was done to support full DES, but we weren't able to run it
* Protocol
** Side-channel attacks
- Python natively supports big integers
- MACs compared with ~!=~
- These are susceptible to timing attacks (leaks information about size of RSA parameters)
- Need to be very careful to avoid this and maintain constant-time execution
** SDES
- SDES provides no security, and is the only supported algorithm for symmetric encryption
- SDES is applied to a string of bytes by encrypting each byte - this is just a substitution cipher
- Since there are predictable bytes of plaintext, we can trivially brute-force to obtain the key for any intercepted exchange
  (For example, the bytes used to indicate message type in =PythonClasses/Constants.py=)
** Breaking SDES
#+begin_src python
from PythonClasses.DES_Class import DES

def encrypt_sdes(key, plaintext):
    sdes = DES()
    sdes.init_key = key
    return sdes.encrypt(plaintext)

def solve_sdes(plaintext, ciphertext):
    sdes = DES()
    return [key for key in range(0, 2**len(sdes.tab_key_init_P))
            if encrypt_sdes(key, plaintext) == ciphertext]
#+end_src
** Semantic security
- RSA is used for key exchange by default
- Blum-Goldwasser is supported and working
** Forward secrecy
- Test program provided regenerates keys each execution, providing forward secrecy
- This might not be feasible in production due to the cost of generating RSA keys
- Ephemeral Diffie-Hellman would probably be a better option
* Questions?
