#+title: Group 10 Post-Mortem
#+author: Samuel Breese and Jordan Alligood
#+options: date:nil timestamp:nil toc:nil num:nil
#+reveal_root: https://cdn.jsdelivr.net/reveal.js/3.0.0/

* Implementation
- SHA-1, SHA256, HMAC
- RSA, Elliptic-curve cryptography on Curve25519, ephemeral elliptic-curve Diffie-Hellman.
- ChaCha20 and Poly1305 AEAD
* Time pressure
- Did practically all of the networking/protocol stuff on Sunday night
- Didn't test very much if at all
- Sacrificed extensibility of codebase
* Summary
- More time would have helped =:(=
- Group 13 broke our system =:|=
- But it was fun =:)=
* Analysis of Group 11's implementation
* Starting off
- Some difficulty getting the project running.
- The project didn't specify Numpy version, and there were some missing functions (tested using Numpy 1.14.5)
- Fortunately, with a few small changes we were able to get everything working
* General comments
- Every implementation for this project is vulnerable to side-channel attacks
- Notably, 
* Hashing and message authentication
- SHA-1 is broken in practice (https://shattered.io)
- Uses HMAC for message authentication, which prevents length extension attacks.
* Key exchange 
- Supports RSA and Blum-Goldwasser
- Partial implementation of ECC, although I think 
* Symmetric encryption
- SDES provides no security, and is the only supported algorithm for symmetric encryption
- SDES is applied to a string of bytes by simply encrypting each byte - this is essentially just a Caesar cipher
- Since there are predictable bytes of plaintext, we can trivially brute-force to obtain the key for any intercepted exchange
  (For example, the bytes used to indicate message type in =PythonClasses/Constants.py=)
** Breaking SDES
#+begin_src python
from PythonClasses.DES_Class import DES

def encrypt_sdes(key, plaintext):
    sdes = DES()
    sdes.init_key = key
    return sdes.encrypt(plaintext)

def solve_sdes(plaintext, ciphertext):
    sdes = DES()
    return [key for key in range(0, 2**len(sdes.tab_key_init_P))
            if encrypt_sdes(key, plaintext) == ciphertext]
#+end_src
* Questions?
